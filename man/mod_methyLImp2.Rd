% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mod_methyLImp2.R
\name{mod_methyLImp2}
\alias{mod_methyLImp2}
\title{Impute Missing Values in DNA Methylation Data}
\usage{
mod_methyLImp2(
  input,
  which_assay = NULL,
  type = c("450K", "EPIC", "user"),
  annotation = NULL,
  groups = NULL,
  range = NULL,
  skip_imputation_ids = NULL,
  parallel = FALSE,
  minibatch_frac = 1,
  minibatch_reps = 1,
  overwrite_res = TRUE
)
}
\arguments{
\item{input}{either a numeric data matrix with missing values to be,
with named samples in rows and variables (probes) in named columns, or a
SummarizedExperiment object, with an assay with variables in rows
and samples in columns, as standard.}

\item{which_assay}{a character specifying the name of assay of the
SummarizedExperiment object to impute. By default the first one will be imputed.}

\item{type}{a type of data, 450K or EPIC. Type is used to split CpGs across
chromosomes. Match of CpGs to chromosomes is taken from ChAMPdata package.
If you wish to provide your own match, specify "user" in
this argument and provide a data frame in the next argument.}

\item{annotation}{a data frame, user provided match between CpG sites and
chromosomes. Must contain two columns: cpg and chr. Choose "user" in the
previous argument to be able to provide user annotation.}

\item{groups}{a vector of the same length as the number of samples that
identifies what groups does each sample correspond, e.g. \code{c(1, 1, 2, 3)}
or \code{c("group1", "group1", "group2", "group3")}. Unique elements of the
vector will be identified as groups and data will be split accordingly.
Imputation will be done for each group separately consecutively.
The default is NULL, so all samples are considered as one group.}

\item{range}{a vector of two numbers, \eqn{min} and \eqn{max},
specifying the range of values in the data.
Since we assume the beta-value representation of the methylation data,
the default range is \eqn{[0, 1]}.
However, if a user wishes to apply the method to the other kind of data,
they can change the range in this argument.}

\item{skip_imputation_ids}{a character vector of names of the columns (CpGs names)
for which \emph{not} to perform the imputation. If \code{NULL}, all columns
are considered.}

\item{parallel}{a boolean specifying to run in parallel or not.}

\item{minibatch_frac}{a number between 0 and 1, what fraction of samples
to use for mini-batch computation. Remember that if your data has several groups,
mini-batch will be applied to each group separately but with the same fraction,
so choose it accordingly. However, if your chosen fraction will be smaller
than a matrix dimension for some groups, mini-batch will be just ignored.
We advise to use mini-batch only if you have large number of samples,
order of hundreds. The default is 1 (i.e., 100\% of samples are used,
no mini-batch).}

\item{minibatch_reps}{a number, how many times to repeat computations with
a fraction of samples specified above (more times -> better performance but
more runtime). The default is 1 (as a companion to default fraction of 100\%,
i.e. no mini-batch).}

\item{overwrite_res}{a boolean specifying whether to overwrite an imputed slot
of the SummarizedExperiment object or to add another slot with
imputed data. The default is \code{TRUE} to reduced the object size.}

\item{progress}{a boolean specifying to show progress bar or not.}
}
\value{
Either a numeric matrix with imputed data or a SummarizedExperiment
object.
}
\description{
Performs missing value imputation specifically designed for DNA methylation data.
The method uses linear regression, leveraging the high degree of inter-sample
correlation typically observed in methylation levels. The implementation is
parallelized across chromosomes for improved performance.

To enable the progress bar, run:

\preformatted{
library(progressr)
handlers(global = TRUE)
}

To setup 6 parallel workers for example, run:

\preformatted{
library(future)
plan(multisession, workers = 6)
}
}
\examples{
data(beta)
beta_with_nas <- generateMissingData(beta, lambda = 3.5)$beta_with_nas
beta_imputed <- mod_methyLImp2(
  input = beta_with_nas, type = "EPIC",
  minibatch_frac = 0.5,
  BPPARAM = BiocParallel::SnowParam(workers = 1)
)
}
